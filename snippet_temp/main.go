package main

import (
	"encoding/base64"
	"fmt"
	"io"
	"os"
	"os/exec"
)

var (
	branch_commit = "develop"
	url_git       = "https://ee.ru"
	project       = "t/b"
	path_clone    = "D:/../tempRepo_"
	//file_nameOpen = "snippet_temp/testD.txt"
	file_nameOpen = "snippet_temp/ะตะต1.txt"
	file_nameNew  = "snippet_temp/data.epf"
)

func main() {
	//sys_clone_repo()
	gitStatus()
	//mDecode()
}

func mDecode() {

	input, err := os.Open(file_nameOpen)
	if err != nil {
		panic(err)
	}
	defer input.Close()

	output, err := os.Create(file_nameNew)
	if err != nil {
		panic(err)
	}
	defer output.Close()

	decoder := base64.NewDecoder(base64.StdEncoding, input)
	io.Copy(output, decoder)
}

func Upload(fileName string, content string) error {
	decode, err := base64.StdEncoding.DecodeString(content)
	file, err := os.Create(fileName)
	defer file.Close()
	_, err = file.Write(decode)
	return err
}

func decodefile() {
	str1 := ""
	file, _ := os.Create(file_nameNew)
	defer file.Close()

	sDec, _ := base64.StdEncoding.DecodeString(string(str1))
	_, err := file.Write(sDec)
	if err != nil {
		fmt.Println(err)
	}
}
func gitStatus() {

	f, err := os.Open(file_nameOpen)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	// for sc.Scan() {
	// 	b := sc.Bytes()
	// 	data := make([]byte, len(b))
	// 	n, err := base64.StdEncoding.Decode(data, b)
	// 	fmt.Println(n, "-", err)
	// 	_, err = file.Write(data)
	// 	wr.Write(b)
	// }
	//st := wr.String()
	//r := bytes.NewReader(wr.Bytes())
	// body, err := ioutil.ReadAll(r)
	// sDec, _ := base64.StdEncoding.DecodeString(string(body))
	//data := make([]byte, base64.NewDecoder()
	// dec := base64.NewDecoder(base64.StdEncoding, r)
	//_, err = file.Write(body)
	// for {
	// dec.Read(body)
	// data := make([]byte, cap(body))
	//_, err = base64.StdEncoding.Decode(dec, body)
	// 	if b == 0 {
	// 		break
	// 	}

	//_, err = file.Write(wr.Bytes())

	// }

	//Upload(file_nameNew, st)
	// data := make([]byte, base64.StdEncoding.DecodedLen(len(st)))
	// _, err = base64.StdEncoding.Decode(data, []byte(st))

	// _, _ = file.Write(data)

	//r := bytes.NewReader(wr.Bytes())

	//_, _ = file.
	// for sc.Scan() {
	// 	wr.WriteString(sc.Text())
	// }

	//tst_p(wr.String())
	// r := bytes.NewReader(wr.Bytes())
	//tst_p(wr.String())

	// str_command := "git status"
	// system_exec(str_command)

}

//func tst_p(st io.Reader) {
func tst_p(st string) {

	// data, err := base64.StdEncoding.DecodeString(st)
	// if err != nil {
	// 	fmt.Println("-1-1-1-1-1-1-1-11-")
	// 	fmt.Println(err.Error())
	// 	return
	// }
	data := make([]byte, base64.StdEncoding.DecodedLen(len(st)))
	file, _ := os.Create(file_nameNew)
	defer file.Close()

	// dec := base64.NewDecoder(base64.StdEncoding, st)
	// buf := &bytes.Buffer{}
	// //ioutil.WriteFile("snippet_temp/data.epf", )
	// f, _ := os.Create("snippet_temp/data.epf")
	// defer f.Close()
	var co = 0
	for {
		n, err := base64.StdEncoding.Decode(data, []byte(st))
		if co > 10 {
			break
		}
		_, _ = file.Write(data)

		fmt.Println(len(data))
		// 	_, err := f.Write(buf.Bytes())
		co++
		fmt.Println(err, "---", n)
	}

	// w := bufio.NewWriter(data)
	// _, err = f.Write(buf.Bytes())
	//fmt.Fprintln(w, st)
	// if err != nil {
	// panic(err)
	// }
	// if err := f.Sync(); err != nil {
	// 	panic(err)
	// }
}

func sys_clone_repo() {
	//ะตัะปะธ ะฝะตั ัะตะฟะพะทะธัะพัะธั - ะบะปะพะฝะธััะตะผ, ะฟะตัะตัะพะดะธะผ ะฝะฐะฒะตัะบั
	//ะธะฝะฐัะต ะฟะตัะตะนัะธ ะฝะฐ ะฒะตัะบั ะธ pull ะธะท origin

	fullCommand := fmt.Sprintf("git clone %s/%s.git %s", url_git, project, path_clone)

	system_exec(fullCommand)
}

func system_exec(str_cmd string) error {
	//run command system
	c := exec.Command("cmd", "/C", str_cmd)

	if err := c.Run(); err != nil {
		fmt.Println("Error: ", err)
		return err
	} else {
		fmt.Println("Done!")
		return nil
	}

}

func checkedOscript() error {
	return nil
}

func oscriptVersion() string {
	//oscript -v
	return ""

}
func checkedGit() error {
	return nil
}
func checkedPrecommit() error {
	//oscript -encoding=utf-8 "\_deploy\pre-commit\src\main.os" precommit ./ -source-dir "DataProcessorsExt"
	return nil
}
